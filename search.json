[{"path":"https://docs.ropensci.org/fastMatMR/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to fastMatMR","title":"Contributing to fastMatMR","text":"Thank considering contributing fastMatMR! appreciate interest making project better.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to fastMatMR","text":"Please read adhere Code Conduct maintain safe, welcoming, inclusive environment.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/CONTRIBUTING.html","id":"types-of-contributions","dir":"","previous_headings":"","what":"Types of Contributions","title":"Contributing to fastMatMR","text":"welcome various forms contributions: Bug Reports: Feel free report bugs encounter. Documentation: Typos, clarity issues, missing guides—help welcome . Feature Discussions/Requests: Got idea? Open issue discuss potential. Code Contributions: code contributions welcome.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/CONTRIBUTING.html","id":"using-co-authored-by-in-git-commits","dir":"","previous_headings":"","what":"Using Co-Authored-By in Git Commits","title":"Contributing to fastMatMR","text":"encourage use co-authored commits collaborative efforts. helps giving credit contributors work.","code":"Co-authored-by: name <name@example.com> Co-authored-by: another-name <another-name@example.com>"},{"path":"https://docs.ropensci.org/fastMatMR/CONTRIBUTING.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Contributing to fastMatMR","text":"contributions make project better everyone. Thank participating!","code":""},{"path":"https://docs.ropensci.org/fastMatMR/CONTRIBUTING.html","id":"local-development","dir":"","previous_headings":"Development","what":"Local Development","title":"Contributing to fastMatMR","text":"Often useful pixi handle dependencies: pre-commit job set CI enforce consistent styles. advisable set locally well using pipx isolation: working packages compiled extensions, instead devtools::load_all() can useful run instead: {r eval=FALSE} devtools::clean_dll() cpp11::cpp_register() devtools::document() devtools::load_all() Also don’t forget recreate readme file: {r eval=FALSE} devtools::build_readme() find pre-commit R flaky, can consider following commands:","code":"pixi shell # Run before committing pipx run pre-commit run --all-files # Or install the git hook to enforce this pipx run pre-commit install find . \\( -path \"./.pixi\" -o -path \"./renv\" \\) -prune -o -type f -name \"*.R\" -exec Rscript -e 'library(styler); style_file(\"{}\")' \\; Rscript -e 'library(lintr); lintr::lint_package(\".\")'"},{"path":"https://docs.ropensci.org/fastMatMR/CONTRIBUTING.html","id":"tests","dir":"","previous_headings":"Development > Local Development","what":"Tests","title":"Contributing to fastMatMR","text":"Tests checks run CI, however locally one can use:","code":"Rscript -e 'devtools::test()'"},{"path":"https://docs.ropensci.org/fastMatMR/CONTRIBUTING.html","id":"documentation","dir":"","previous_headings":"Development > Local Development","what":"Documentation","title":"Contributing to fastMatMR","text":"Ideally change documented. Major changes vignettes, minor ones can added newsfragments. Benchmark vignettes pre-computed via: makes faster build package run checks.","code":"Rscript tools/rebuild-benchmarks.R"},{"path":"https://docs.ropensci.org/fastMatMR/CONTRIBUTING.html","id":"cran-submission-and-updates","dir":"","previous_headings":"","what":"CRAN Submission and Updates","title":"Contributing to fastMatMR","text":"submitting updating package CRAN, follow steps ensure smooth submission process: Update documentation, recreate vignettes. runs various checks make sure package CRAN-ready. submission, ’s beneficial test package different platforms. commented lines used populate cran_comments.md. Using goodpractice package can help ensure ’re following best practices R package development. Depending extent nature changes, adjust version package. Remember semantic versioning conventions. checks pass ’ve ensured quality package, ’s time submit. detailed information CRAN submission update process, refer following resources: - Releasing package - Develop R Package Submit CRAN (Mannheim University)","code":"urlchecker::url_check() devtools::document() devtools::build_readme() ## Will take a while Rscript tools/rebuild-benchmarks.R devtools::check(remote = TRUE, manual = TRUE) ## devtools::install_github('r-lib/revdepcheck') revdepcheck::revdep_check(num_workers = 4) res_cran <- rhub::check_for_cran()   # Tests on multiple platforms ## res_cran$cran_summary() ubsan <- rhub::check_with_sanitizers() # A post-submission CRAN check devtools::check_win_devel()  # Specifically for Windows devtools::check_mac_release() # Mac only goodpractice::gp() # Use \"major\", \"minor\", or \"patch\" based on the changes fledge::bump_version(\"patch\") devtools::release()"},{"path":"https://docs.ropensci.org/fastMatMR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 fastMatMR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/articles/fastMatMR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started","text":"fastMatMR R package provides high-performance reading writing Matrix Market files. wraps around fast_matrix_market C++ library, ensuring optimal performance. Performance vignettes write read operations also provided.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/articles/fastMatMR.html","id":"unique-features","dir":"Articles","previous_headings":"Introduction","what":"Unique Features","title":"Getting Started","text":"Unlike packages, Matrix, fastMatMR offers extended support : Dense Vectors: Writing standard R vectors .mtx files. Dense Matrices: Writing standard R matrices .mtx files. Sparse Matrices: efficient way reading writing sparse matrices. performance benchmarks, see performance vignettes write read operations.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/articles/fastMatMR.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started","text":"install development version fastMatMR GitHub:","code":"install.packages(\"devtools\") devtools::install_github(\"ropensci/fastMatMR\")"},{"path":"https://docs.ropensci.org/fastMatMR/articles/fastMatMR.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Getting Started","text":"Load fastMatMR package:","code":"library(fastMatMR)"},{"path":[]},{"path":"https://docs.ropensci.org/fastMatMR/articles/fastMatMR.html","id":"with-dense-vectors","dir":"Articles","previous_headings":"Basic Usage > Writing Matrix Market files","what":"With Dense Vectors","title":"Getting Started","text":"","code":"vec <- c(1, 2, 3) temp_file_vec <- tempfile(fileext = \".mtx\") write_fmm(vec, temp_file_vec) #> [1] TRUE"},{"path":"https://docs.ropensci.org/fastMatMR/articles/fastMatMR.html","id":"with-dense-matrices","dir":"Articles","previous_headings":"Basic Usage > Writing Matrix Market files","what":"With Dense Matrices","title":"Getting Started","text":"","code":"mat <- matrix(c(1, 2, 3, 4), nrow = 2) temp_file_mat <- tempfile(fileext = \".mtx\") write_fmm(mat, temp_file_mat) #> [1] TRUE"},{"path":"https://docs.ropensci.org/fastMatMR/articles/fastMatMR.html","id":"with-sparse-matrices","dir":"Articles","previous_headings":"Basic Usage > Writing Matrix Market files","what":"With Sparse Matrices","title":"Getting Started","text":"","code":"sp_mat <- Matrix::sparseMatrix(i = c(1, 3), j = c(2, 4), x = 7:8) temp_file_sp_mat <- tempfile(fileext = \".mtx\") write_fmm(sp_mat, temp_file_sp_mat) #> [1] TRUE"},{"path":"https://docs.ropensci.org/fastMatMR/articles/fastMatMR.html","id":"reading-matrix-market-files","dir":"Articles","previous_headings":"Basic Usage","what":"Reading Matrix Market files","title":"Getting Started","text":"fastMatMR correctly roundtrip NaN values. NA values supported Matrix Market format, coerced NaN","code":""},{"path":"https://docs.ropensci.org/fastMatMR/articles/fastMatMR.html","id":"with-dense-vectors-1","dir":"Articles","previous_headings":"Basic Usage > Reading Matrix Market files","what":"With Dense Vectors","title":"Getting Started","text":"Similarly, fmm_to_ functions can used read .mtx files.","code":"vec <- c(1, 2, 3.32, 225.61) temp_file_vec_r <- tempfile(fileext = \".mtx\") vec_to_fmm(vec, temp_file_vec_r) #> [1] TRUE fmm_to_vec(temp_file_vec_r) #> [1]   1.00   2.00   3.32 225.61"},{"path":[]},{"path":"https://docs.ropensci.org/fastMatMR/articles/fastMatMR.html","id":"alternatives","dir":"Articles","previous_headings":"Basic Usage > Addenum","what":"Alternatives","title":"Getting Started","text":"Sparse matrices can written read Matrix library: However, can seen , NA values handled incorrectly, cause overflow. Dense matrices vectors read written matrix market format Matrix library.","code":"spmat <- Matrix::Matrix(c(1, 0, 3, NA), nrow = 2, sparse = TRUE) temp_file_sp_na <- tempfile(fileext = \".mtx\") Matrix::writeMM(spmat, temp_file_sp_na) Matrix::readMM(temp_file_sp_na) ## NULL ## 2 x 2 sparse Matrix of class \"dgTMatrix\" ## [1,] 1  3e+00 ## [2,] . 1e+308"},{"path":"https://docs.ropensci.org/fastMatMR/articles/fastMatMR.html","id":"reading-back-in-python","dir":"Articles","previous_headings":"Basic Usage > Addenum","what":"Reading Back In Python","title":"Getting Started","text":"Since Matrix Market format language agnostic, .mtx files produced can even read Python:","code":"pip install fast_matrix_market python -c 'import fast_matrix_market as fmm; print(fmm.read_array_or_coo(\"sparse.mtx\"))'"},{"path":"https://docs.ropensci.org/fastMatMR/articles/fmm_read_bench.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Benchmarking Sparse Matrix Market Read Operations","text":"vignette demonstrates benchmark comparing readMM function Matrix package read_fmm function fastMatMR package. Since Matrix support reading writing dense matrices, focus sparse case.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/articles/fmm_read_bench.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading Packages","title":"Benchmarking Sparse Matrix Market Read Operations","text":"First, load necessary packages:","code":"library(Matrix) library(fastMatMR) library(microbenchmark) library(ggplot2)"},{"path":"https://docs.ropensci.org/fastMatMR/articles/fmm_read_bench.html","id":"benchmarking-with-fixed-sparsity","dir":"Articles","previous_headings":"","what":"Benchmarking with Fixed Sparsity","title":"Benchmarking Sparse Matrix Market Read Operations","text":"first benchmark varying matrix sizes fixed sparsity. shown visually represented : plot chunk fixed-sparse-read","code":"# Function to create a sparse matrix of given size create_sparse_matrix <- function(n, sparsity = 0.7) {       mat <- matrix(0, nrow = n, ncol = n)       for (i in 1:n) {         for (j in 1:n) {           if (runif(1) > sparsity) {             mat[i, j] <- rnorm(1)           }         }       }       return(Matrix(mat, sparse = TRUE))     }       # Define a range of matrix sizes     sizes <- c(10, 100, 500, 1000, 2000, 3000)       # Prepare data frame to store results     results_fixed_sparsity <- data.frame()       # Benchmarking     for (n in sizes) {       message(\"Benchmarking for matrix size: \", n, \"x\", n)         # Generate a sparse matrix of size n x n       testmat <- create_sparse_matrix(n)       write_fmm(testmat, \"sparse.mtx\")         # Run the benchmarks, we coerce to a sparse matrix for readMM for fairness       bm <- microbenchmark(         Matrix_readMM = as(readMM(\"sparse.mtx\"), \"CsparseMatrix\"),         fastMatMR_read_fmm = fmm_to_sparse_Matrix(\"sparse.mtx\"),         times = 10       )         bm$size <- n       results_fixed_sparsity <- rbind(results_fixed_sparsity, bm)     } #> Benchmarking for matrix size: 10x10 #> Benchmarking for matrix size: 100x100 #> Benchmarking for matrix size: 500x500 #> Benchmarking for matrix size: 1000x1000 #> Benchmarking for matrix size: 2000x2000 #> Benchmarking for matrix size: 3000x3000 # Plotting suppressWarnings(print(       ggplot(results_fixed_sparsity, aes(x = size, y = time, color = expr)) +         geom_point() +         geom_smooth(method = \"loess\") +         ggtitle(\"Benchmarking reads with fixed sparsity for 70% sparsity\") +         xlab(\"Matrix Size\") +         ylab(\"Time (ns)\") )) #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://docs.ropensci.org/fastMatMR/articles/fmm_read_bench.html","id":"benchmarking-with-varying-sparsity","dir":"Articles","previous_headings":"","what":"Benchmarking with Varying Sparsity","title":"Benchmarking Sparse Matrix Market Read Operations","text":"Now, benchmark varying sparsity patterns large matrix. Now can plot : plot chunk varying-sparse-read","code":"# Sparsity levels to test sparsity_levels <- seq(0.45, 0.95, by = 0.1)  # Prepare data frame to store results results_varying_sparsity <- data.frame()  # Benchmarking for (sparsity in sparsity_levels) {   message(\"Benchmarking for sparsity level: \", sparsity)    # Generate a sparse matrix of size 2000 x 2000 with varying sparsity   testmat <- create_sparse_matrix(2000, sparsity)   write_fmm(testmat, \"sparse.mtx\")    # Run the benchmarks   bm <- microbenchmark(     Matrix_readMM = as(readMM(\"sparse.mtx\"), \"CsparseMatrix\"),     fastMatMR_read_fmm = fmm_to_sparse_Matrix(\"sparse.mtx\"),     times = 10   )    bm$sparsity <- sparsity   results_varying_sparsity <- rbind(results_varying_sparsity, bm) } #> Benchmarking for sparsity level: 0.45 #> Benchmarking for sparsity level: 0.55 #> Benchmarking for sparsity level: 0.65 #> Benchmarking for sparsity level: 0.75 #> Benchmarking for sparsity level: 0.85 #> Benchmarking for sparsity level: 0.95 ggplot(results_varying_sparsity, aes(x = sparsity, y = time, color = expr)) +   geom_point() +   geom_smooth(method = \"loess\") +   scale_x_log10() +   scale_y_log10() +   ggtitle(\"Benchmarking reads with varying sparsity for 2000 entries\") +   xlab(\"Sparsity Level (log10)\") +   ylab(\"Time (ns, log10)\") #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://docs.ropensci.org/fastMatMR/articles/fmm_read_bench.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"Benchmarking Sparse Matrix Market Read Operations","text":"see though statistically significant differences speed small matrices, fastMatMR package significantly faster large matrices. readMM function Matrix reads data triplet form, gets slower larger matrices.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/articles/fmm_read_bench.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Benchmarking Sparse Matrix Market Read Operations","text":"vignette computed advance, corresponding session info:","code":"sessionInfo() #> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Arch Linux #>  #> Matrix products: default #> BLAS:   /usr/lib/libblas.so.3.11.0  #> LAPACK: /usr/lib/liblapack.so.3.11.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Iceland #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.4.4         microbenchmark_1.4.10 Matrix_1.5-4.1        #> [4] fastMatMR_1.2.5       testthat_3.1.10       #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.4      xfun_0.40         htmlwidgets_1.6.2 devtools_2.4.5    #>  [5] remotes_2.4.2.1   processx_3.8.2    lattice_0.21-8    callr_3.7.3       #>  [9] generics_0.1.3    vctrs_0.6.3       tools_4.3.1       ps_1.7.5          #> [13] parallel_4.3.1    tibble_3.2.1      fansi_1.0.4       highr_0.10        #> [17] pkgconfig_2.0.3   desc_1.4.2        lifecycle_1.0.3   farver_2.1.1      #> [21] compiler_4.3.1    stringr_1.5.0     brio_1.1.3        munsell_0.5.0     #> [25] decor_1.0.2       httpuv_1.6.11     htmltools_0.5.6   usethis_2.2.2     #> [29] later_1.3.1       pillar_1.9.0      crayon_1.5.2      urlchecker_1.0.1  #> [33] ellipsis_0.3.2    cachem_1.0.8      sessioninfo_1.2.2 nlme_3.1-162      #> [37] mime_0.12         commonmark_1.9.0  tidyselect_1.2.0  digest_0.6.33     #> [41] stringi_1.7.12    dplyr_1.1.2       purrr_1.0.2       labeling_0.4.3    #> [45] splines_4.3.1     rprojroot_2.0.3   fastmap_1.1.1     grid_4.3.1        #> [49] colorspace_2.1-0  cli_3.6.1         magrittr_2.0.3    pkgbuild_1.4.2    #> [53] utf8_1.2.3        withr_2.5.0       prettyunits_1.1.1 scales_1.2.1      #> [57] promises_1.2.1    cpp11_0.4.6       roxygen2_7.2.3    memoise_2.0.1     #> [61] shiny_1.7.5       evaluate_0.21     knitr_1.43        miniUI_0.1.1.1    #> [65] mgcv_1.8-42       profvis_0.3.8     rlang_1.1.1       Rcpp_1.0.11       #> [69] xtable_1.8-4      glue_1.6.2        xml2_1.3.5        pkgload_1.3.2.1   #> [73] rstudioapi_0.15.0 R6_2.5.1          fs_1.6.3"},{"path":"https://docs.ropensci.org/fastMatMR/articles/fmm_write_bench.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Benchmarking Sparse Matrix Market Write Operations","text":"vignette demonstrates benchmark comparing writeMM function Matrix package write_fmm function fastMatMR package. Since Matrix support reading writing dense matrices, focus sparse case.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/articles/fmm_write_bench.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading Packages","title":"Benchmarking Sparse Matrix Market Write Operations","text":"First, load necessary packages:","code":"library(Matrix) library(fastMatMR) library(microbenchmark) library(ggplot2)"},{"path":"https://docs.ropensci.org/fastMatMR/articles/fmm_write_bench.html","id":"benchmarking-with-fixed-sparsity","dir":"Articles","previous_headings":"","what":"Benchmarking with Fixed Sparsity","title":"Benchmarking Sparse Matrix Market Write Operations","text":"first benchmark varying matrix sizes fixed sparsity. shown visually represented : plot chunk fixed-sparse-write","code":"# Function to create a sparse matrix of given size create_sparse_matrix <- function(n, sparsity = 0.7) {   mat <- matrix(0, nrow = n, ncol = n)   for (i in 1:n) {     for (j in 1:n) {       if (runif(1) > sparsity) {         mat[i, j] <- rnorm(1)       }     }   }   return(Matrix(mat, sparse = TRUE)) }  # Define a range of matrix sizes sizes <- c(10, 100, 500, 1000)  # Prepare data frame to store results results_fixed_sparsity <- data.frame()  # Benchmarking for (n in sizes) {   message(\"Benchmarking for matrix size: \", n, \"x\", n)    # Generate a sparse matrix of size n x n   testmat <- create_sparse_matrix(n)    # Run the benchmarks   bm <- microbenchmark(     Matrix_writeMM = writeMM(testmat, \"mat.mtx\"),     fastMatMR_write_fmm = write_fmm(testmat, \"fmm.mtx\"),     times = 10   )    bm$size <- n   results_fixed_sparsity <- rbind(results_fixed_sparsity, bm) } #> Benchmarking for matrix size: 10x10 #> Benchmarking for matrix size: 100x100 #> Benchmarking for matrix size: 500x500 #> Benchmarking for matrix size: 1000x1000 # Plotting suppressWarnings(print(   ggplot(results_fixed_sparsity, aes(x = size, y = time, color = expr)) +     geom_point() +     geom_smooth(method = \"loess\") +     scale_y_log10() +     ggtitle(\"Benchmarking writes with fixed sparsity for 70% sparsity\") +     xlab(\"Matrix Size\") +     ylab(\"Time (ns, log10)\") )) #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://docs.ropensci.org/fastMatMR/articles/fmm_write_bench.html","id":"benchmarking-with-varying-sparsity","dir":"Articles","previous_headings":"","what":"Benchmarking with Varying Sparsity","title":"Benchmarking Sparse Matrix Market Write Operations","text":"Now, benchmark varying sparsity patterns large matrix. Now can plot : plot chunk varying-sparse-write","code":"# Sparsity levels to test sparsity_levels <- seq(0.4, 0.95, by = 0.05)  # Prepare data frame to store results results_varying_sparsity <- data.frame()  # Benchmarking for (sparsity in sparsity_levels) {   message(\"Benchmarking for sparsity level: \", sparsity)    # Generate a sparse matrix of size 500 x 500 with varying sparsity   testmat <- create_sparse_matrix(500, sparsity)    # Run the benchmarks   bm <- microbenchmark(     Matrix_writeMM = writeMM(testmat, \"mat.mtx\"),     fastMatMR_write_fmm = write_fmm(testmat, \"fmm.mtx\"),     times = 10   )    bm$sparsity <- sparsity   results_varying_sparsity <- rbind(results_varying_sparsity, bm) } #> Benchmarking for sparsity level: 0.4 #> Benchmarking for sparsity level: 0.45 #> Benchmarking for sparsity level: 0.5 #> Benchmarking for sparsity level: 0.55 #> Benchmarking for sparsity level: 0.6 #> Benchmarking for sparsity level: 0.65 #> Benchmarking for sparsity level: 0.7 #> Benchmarking for sparsity level: 0.75 #> Benchmarking for sparsity level: 0.8 #> Benchmarking for sparsity level: 0.85 #> Benchmarking for sparsity level: 0.9 #> Benchmarking for sparsity level: 0.95 ggplot(results_varying_sparsity, aes(x = sparsity, y = time, color = expr)) +   geom_point() +   geom_smooth(method = \"loess\") +   scale_x_log10() +   scale_y_log10() +   ggtitle(\"Benchmarking writes with varying sparsity for 500 entries\") +   xlab(\"Sparsity Level (log10)\") +   ylab(\"Time (ns, log10)\") #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://docs.ropensci.org/fastMatMR/articles/fmm_write_bench.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"Benchmarking Sparse Matrix Market Write Operations","text":"Clearly, larger matrices, fastMatMR consistently around two orders magnitude faster Matrix. extremely small matrices (<50) high (~.7) levels sparsity, difference pronounced, matrices larger 50x50 fastMatMR retains order magnitude improvement.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/articles/fmm_write_bench.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Benchmarking Sparse Matrix Market Write Operations","text":"vignette computed advance, corresponding session info:","code":"sessionInfo() #> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Arch Linux #>  #> Matrix products: default #> BLAS:   /usr/lib/libblas.so.3.11.0  #> LAPACK: /usr/lib/liblapack.so.3.11.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Iceland #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.4.4         microbenchmark_1.4.10 Matrix_1.5-4.1        #> [4] fastMatMR_1.2.5       testthat_3.1.10       #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.4      xfun_0.40         htmlwidgets_1.6.2 devtools_2.4.5    #>  [5] remotes_2.4.2.1   processx_3.8.2    lattice_0.21-8    callr_3.7.3       #>  [9] generics_0.1.3    vctrs_0.6.3       tools_4.3.1       ps_1.7.5          #> [13] parallel_4.3.1    tibble_3.2.1      fansi_1.0.4       highr_0.10        #> [17] pkgconfig_2.0.3   desc_1.4.2        lifecycle_1.0.3   farver_2.1.1      #> [21] compiler_4.3.1    stringr_1.5.0     brio_1.1.3        munsell_0.5.0     #> [25] decor_1.0.2       httpuv_1.6.11     htmltools_0.5.6   usethis_2.2.2     #> [29] later_1.3.1       pillar_1.9.0      crayon_1.5.2      urlchecker_1.0.1  #> [33] ellipsis_0.3.2    cachem_1.0.8      sessioninfo_1.2.2 nlme_3.1-162      #> [37] mime_0.12         commonmark_1.9.0  tidyselect_1.2.0  digest_0.6.33     #> [41] stringi_1.7.12    dplyr_1.1.2       purrr_1.0.2       labeling_0.4.3    #> [45] splines_4.3.1     rprojroot_2.0.3   fastmap_1.1.1     grid_4.3.1        #> [49] colorspace_2.1-0  cli_3.6.1         magrittr_2.0.3    pkgbuild_1.4.2    #> [53] utf8_1.2.3        withr_2.5.0       prettyunits_1.1.1 scales_1.2.1      #> [57] promises_1.2.1    cpp11_0.4.6       roxygen2_7.2.3    memoise_2.0.1     #> [61] shiny_1.7.5       evaluate_0.21     knitr_1.43        miniUI_0.1.1.1    #> [65] mgcv_1.8-42       profvis_0.3.8     rlang_1.1.1       Rcpp_1.0.11       #> [69] xtable_1.8-4      glue_1.6.2        xml2_1.3.5        pkgload_1.3.2.1   #> [73] rstudioapi_0.15.0 R6_2.5.1          fs_1.6.3"},{"path":"https://docs.ropensci.org/fastMatMR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rohit Goswami. Author, maintainer. Ildiko Czeller. Reviewer. Adam Lugowski. Contributor.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Goswami R (2024). fastMatMR: High-Performance Matrix Market File Operations. R package version 1.2.5, https://github.com/ropensci/fastMatMR.","code":"@Manual{,   title = {fastMatMR: High-Performance Matrix Market File Operations},   author = {Rohit Goswami},   year = {2024},   note = {R package version 1.2.5},   url = {https://github.com/ropensci/fastMatMR}, }"},{"path":[]},{"path":"https://docs.ropensci.org/fastMatMR/index.html","id":"about","dir":"","previous_headings":"","what":"About","title":"High-Performance Matrix Market File Operations","text":"fastMatMR provides R bindings reading writing Matrix Market files using high-performance fast_matrix_market C++ library (version 1.7.4).","code":""},{"path":"https://docs.ropensci.org/fastMatMR/index.html","id":"why","dir":"","previous_headings":"","what":"Why?","title":"High-Performance Matrix Market File Operations","text":"Matrix Market files crucial much data-science ecosystem. fastMatMR package focuses high-performance read write operations Matrix Market files, serving key tool data extraction computational data science pipelines. target audience scientific applications primarily include data scientists researchers developing numerical methods may wish either test standard NIST (National Institute Standards Technology) include: comparative studies algorithms numerical linear algebra, featuring nearly 500 sparse matrices variety applications, well matrix generation tools services. Additionally, able use matrix market file format, means easier interface R analysis Python (e.g. SciPy uses underlying C++ library). files can also used Tensor Algebra Compiler (TACO).","code":""},{"path":"https://docs.ropensci.org/fastMatMR/index.html","id":"features","dir":"","previous_headings":"Why?","what":"Features","title":"High-Performance Matrix Market File Operations","text":"Extended Support: fastMatMR supports standard R vectors, matrices, well Matrix sparse objects. Performance: package thin wrapper around one fastest C++ libraries reading writing .mtx files. Correctness: Unlike Matrix, roundtripping NA NaN values works coercing NaN instead arbitrarily high numbers. vignettes read write operations demonstrate performance claims.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/index.html","id":"alternatives-and-statement-of-need","dir":"","previous_headings":"Why? > Features","what":"Alternatives and statement of need","title":"High-Performance Matrix Market File Operations","text":"However, .mtx files, can handles sparse matrices writing reading. Round-tripping (writing subsequently reading) data NA NaN values produces arbitrarily high numbers instead preserving NaN / handling NA","code":""},{"path":[]},{"path":"https://docs.ropensci.org/fastMatMR/index.html","id":"cran","dir":"","previous_headings":"Installation","what":"CRAN","title":"High-Performance Matrix Market File Operations","text":"latest CRAN version:","code":"install.packages(\"fastMatMR\")"},{"path":"https://docs.ropensci.org/fastMatMR/index.html","id":"r-universe","dir":"","previous_headings":"Installation","what":"R-Universe","title":"High-Performance Matrix Market File Operations","text":"latest development version fastMatMR:","code":"install.packages(\"fastMatMR\",                  repos = \"https://ropensci.r-universe.dev\")"},{"path":"https://docs.ropensci.org/fastMatMR/index.html","id":"development-git","dir":"","previous_headings":"Installation","what":"Development Git","title":"High-Performance Matrix Market File Operations","text":"latest commit, one can use:","code":"# install.packages(\"devtools\") devtools::install_github(\"ropensci/fastMatMR\")"},{"path":"https://docs.ropensci.org/fastMatMR/index.html","id":"quick-example","dir":"","previous_headings":"","what":"Quick Example","title":"High-Performance Matrix Market File Operations","text":"resulting .mtx file language agnostic, can even read back python example: Similarly, fastMatMR supports writing reading R objects (e.g. standard R vectors matrices), seen getting started vignette.","code":"library(fastMatMR) spmat <- Matrix::Matrix(c(1, 0, 3, 2), nrow = 2, sparse = TRUE) write_fmm(spmat, \"sparse.mtx\") fmm_to_sparse_Matrix(\"sparse.mtx\") pip install fast_matrix_market python -c 'import fast_matrix_market as fmm; print(fmm.read_array_or_coo(\"sparse.mtx\"))' ((array([1., 3., 2.]), (array([0, 0, 1], dtype=int32), array([0, 1, 1], dtype=int32))), (2, 2)) python -c 'import fast_matrix_market as fmm; print(fmm.read_array(\"sparse.mtx\"))' array([[1., 3.],        [0., 2.]])"},{"path":"https://docs.ropensci.org/fastMatMR/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"High-Performance Matrix Market File Operations","text":"Contributions welcome. Please see Contribution Guide Code Conduct.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"High-Performance Matrix Market File Operations","text":"project licensed MIT License.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/index.html","id":"logo","dir":"","previous_headings":"License","what":"Logo","title":"High-Performance Matrix Market File Operations","text":"logo generated via non-commercial use prompt hotpot.ai, blue, green, riff NIST Matrix Market logo. text added presentation software (WPS Presentation). Hexagonal cropping accomplished hexb compatible design using hexsticker.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/fmm_to_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Matrix Market File to Matrix — fmm_to_mat","title":"Convert Matrix Market File to Matrix — fmm_to_mat","text":"function reads Matrix Market file converts matrix R.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/fmm_to_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Matrix Market File to Matrix — fmm_to_mat","text":"","code":"fmm_to_mat(filename)"},{"path":"https://docs.ropensci.org/fastMatMR/reference/fmm_to_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Matrix Market File to Matrix — fmm_to_mat","text":"filename name input Matrix Market file read.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/fmm_to_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Matrix Market File to Matrix — fmm_to_mat","text":"matrix containing data read Matrix Market file.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/fmm_to_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Matrix Market File to Matrix — fmm_to_mat","text":"","code":"# Create sample_mat <- matrix(c(1, 2, 3, 4), nrow = 2) temp_file_mat <- tempfile(fileext = \".mtx\") write_fmm(sample_mat, temp_file_mat) #> [1] TRUE # Read mat <- fmm_to_mat(temp_file_mat)"},{"path":"https://docs.ropensci.org/fastMatMR/reference/fmm_to_sparse_Matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Matrix Market File to Sparse Matrix — fmm_to_sparse_Matrix","title":"Convert Matrix Market File to Sparse Matrix — fmm_to_sparse_Matrix","text":"function reads Matrix Market file converts sparse matrix R using Matrix package.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/fmm_to_sparse_Matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Matrix Market File to Sparse Matrix — fmm_to_sparse_Matrix","text":"","code":"fmm_to_sparse_Matrix(filename)"},{"path":"https://docs.ropensci.org/fastMatMR/reference/fmm_to_sparse_Matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Matrix Market File to Sparse Matrix — fmm_to_sparse_Matrix","text":"filename name input Matrix Market file read.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/fmm_to_sparse_Matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Matrix Market File to Sparse Matrix — fmm_to_sparse_Matrix","text":"dgCMatrix object containing data read Matrix Market file.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/fmm_to_sparse_Matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Matrix Market File to Sparse Matrix — fmm_to_sparse_Matrix","text":"","code":"# Create sample_sparse_mat <- Matrix::Matrix(c(1, 0, 0, 2), nrow = 2, sparse = TRUE) temp_file <- tempfile(fileext = \".mtx\") write_fmm(sample_sparse_mat, temp_file) #> [1] TRUE # Read sparse_mat <- fmm_to_sparse_Matrix(temp_file)"},{"path":"https://docs.ropensci.org/fastMatMR/reference/fmm_to_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Matrix Market File to Numeric Vector — fmm_to_vec","title":"Convert Matrix Market File to Numeric Vector — fmm_to_vec","text":"function reads Matrix Market file converts numeric vector R.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/fmm_to_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Matrix Market File to Numeric Vector — fmm_to_vec","text":"","code":"fmm_to_vec(filename)"},{"path":"https://docs.ropensci.org/fastMatMR/reference/fmm_to_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Matrix Market File to Numeric Vector — fmm_to_vec","text":"filename name input Matrix Market file read.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/fmm_to_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Matrix Market File to Numeric Vector — fmm_to_vec","text":"numeric vector containing data read Matrix Market file.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/fmm_to_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Matrix Market File to Numeric Vector — fmm_to_vec","text":"","code":"# Create sample_vec <- c(1, 2, 3) temp_file_vec <- tempfile(fileext = \".mtx\") write_fmm(sample_vec, temp_file_vec) #> [1] TRUE # Read vec <- fmm_to_vec(temp_file_vec)"},{"path":"https://docs.ropensci.org/fastMatMR/reference/intmat_to_fmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Numeric Matrix to Matrix Market Format — intmat_to_fmm","title":"Convert a Numeric Matrix to Matrix Market Format — intmat_to_fmm","text":"function takes numeric matrix converts Matrix Market file.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/intmat_to_fmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Numeric Matrix to Matrix Market Format — intmat_to_fmm","text":"input numeric matrix converted. filename name output file Matrix Market formatted data saved.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/intmat_to_fmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Numeric Matrix to Matrix Market Format — intmat_to_fmm","text":"boolean indicating success failure. Writes MTX file disk.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/intmat_to_fmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Numeric Matrix to Matrix Market Format — intmat_to_fmm","text":"","code":"intmat <- matrix(c(1L, 2L, 3L, 4L), nrow = 2) intmat_to_fmm(intmat, tempfile(fileext = \".mtx\")) #> [1] TRUE"},{"path":"https://docs.ropensci.org/fastMatMR/reference/intvec_to_fmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a numeric integer vector to Matrix Market Format — intvec_to_fmm","title":"Convert a numeric integer vector to Matrix Market Format — intvec_to_fmm","text":"function takes numeric intvector converts Matrix Market output file.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/intvec_to_fmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a numeric integer vector to Matrix Market Format — intvec_to_fmm","text":"input numeric integer vector converted. filename name output file Matrix Market formatted data saved.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/intvec_to_fmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a numeric integer vector to Matrix Market Format — intvec_to_fmm","text":"boolean indicating success failure. Writes MTX file disk.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/intvec_to_fmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a numeric integer vector to Matrix Market Format — intvec_to_fmm","text":"","code":"intvec <- c(1L, 2L, 3L) intvec_to_fmm(intvec, tempfile(fileext = \".mtx\")) #> [1] TRUE"},{"path":"https://docs.ropensci.org/fastMatMR/reference/mat_to_fmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Numeric Matrix to Matrix Market Format — mat_to_fmm","title":"Convert a Numeric Matrix to Matrix Market Format — mat_to_fmm","text":"function takes numeric matrix converts Matrix Market file.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/mat_to_fmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Numeric Matrix to Matrix Market Format — mat_to_fmm","text":"input numeric matrix converted. filename name output file Matrix Market formatted data saved.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/mat_to_fmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Numeric Matrix to Matrix Market Format — mat_to_fmm","text":"boolean indicating success failure. Writes MTX file disk.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/mat_to_fmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Numeric Matrix to Matrix Market Format — mat_to_fmm","text":"","code":"mat <- matrix(c(1, 2, 3, 4), nrow = 2) mat_to_fmm(mat, tempfile(fileext = \".mtx\")) #> [1] TRUE"},{"path":"https://docs.ropensci.org/fastMatMR/reference/sparse_Matrix_to_fmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Sparse Numeric Matrix to Matrix Market Format — sparse_Matrix_to_fmm","title":"Convert a Sparse Numeric Matrix to Matrix Market Format — sparse_Matrix_to_fmm","text":"function takes sparse numeric matrix converts Matrix Market file.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/sparse_Matrix_to_fmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Sparse Numeric Matrix to Matrix Market Format — sparse_Matrix_to_fmm","text":"input sparse numeric matrix converted. filename name output file Matrix Market formatted data saved.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/sparse_Matrix_to_fmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Sparse Numeric Matrix to Matrix Market Format — sparse_Matrix_to_fmm","text":"boolean indicating success failure. Writes MTX file disk.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/sparse_Matrix_to_fmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Sparse Numeric Matrix to Matrix Market Format — sparse_Matrix_to_fmm","text":"","code":"sparse_mat <- Matrix::Matrix(c(1, 0, 0, 2), nrow = 2, sparse = TRUE) sparse_Matrix_to_fmm(sparse_mat, tempfile(fileext = \".mtx\")) #> [1] TRUE"},{"path":"https://docs.ropensci.org/fastMatMR/reference/vec_to_fmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Numeric Vector to Matrix Market Format — vec_to_fmm","title":"Convert a Numeric Vector to Matrix Market Format — vec_to_fmm","text":"function takes numeric vector converts Matrix Market output file.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/vec_to_fmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Numeric Vector to Matrix Market Format — vec_to_fmm","text":"input numeric vector converted. filename name output file Matrix Market formatted data saved.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/vec_to_fmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Numeric Vector to Matrix Market Format — vec_to_fmm","text":"boolean indicating success failure. Writes MTX file disk.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/vec_to_fmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Numeric Vector to Matrix Market Format — vec_to_fmm","text":"","code":"vec <- c(1, 2, 3) vec_to_fmm(vec, tempfile(fileext = \".mtx\")) #> [1] TRUE"},{"path":"https://docs.ropensci.org/fastMatMR/reference/write_fmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Various Numeric Types to Matrix Market Format — write_fmm","title":"Convert Various Numeric Types to Matrix Market Format — write_fmm","text":"function takes different types numeric inputs—vectors, matrices, sparse matrices— converts Matrix Market files. output file written disk.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/write_fmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Various Numeric Types to Matrix Market Format — write_fmm","text":"","code":"write_fmm(input, filename = \"out.mtx\")"},{"path":"https://docs.ropensci.org/fastMatMR/reference/write_fmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Various Numeric Types to Matrix Market Format — write_fmm","text":"input numeric object converted. can numeric vector, matrix, sparse matrix. filename name output file Matrix Market formatted data saved.  recommended use filename ending \".mtx\" clarity.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/write_fmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Various Numeric Types to Matrix Market Format — write_fmm","text":"boolean indicating success failure. Writes MTX file disk.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/reference/write_fmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Various Numeric Types to Matrix Market Format — write_fmm","text":"","code":"vec <- c(1, 2, 3) mat <- matrix(c(1, 2, 3, 4), nrow = 2) sparse_mat_diag <- Matrix::Matrix(c(1, 0, 0, 2), nrow = 2, sparse = TRUE) ## Diagonal ^- sparse_mat <- Matrix::Matrix(c(1, 1, 0, 2), nrow = 2, sparse = TRUE) ## And not diagonal -^ write_fmm(vec, tempfile(fileext = \".mtx\")) #> [1] TRUE write_fmm(mat, tempfile(fileext = \".mtx\")) #> [1] TRUE write_fmm(sparse_mat_diag, tempfile(fileext = \".mtx\")) #> [1] TRUE write_fmm(sparse_mat, tempfile(fileext = \".mtx\")) #> [1] TRUE"},{"path":"https://docs.ropensci.org/fastMatMR/news/index.html","id":"fastmatmr-125-2023-11-03","dir":"Changelog","previous_headings":"","what":"fastMatMR 1.2.5 (2023-11-03)","title":"fastMatMR 1.2.5 (2023-11-03)","text":"CRAN release: 2023-11-03","code":""},{"path":"https://docs.ropensci.org/fastMatMR/news/index.html","id":"changes-1-2-5","dir":"Changelog","previous_headings":"","what":"Changes","title":"fastMatMR 1.2.5 (2023-11-03)","text":"Caught CRAN Update CONTRIBUTING.md release process","code":""},{"path":"https://docs.ropensci.org/fastMatMR/news/index.html","id":"fastmatmr-124-2023-11-02","dir":"Changelog","previous_headings":"","what":"fastMatMR 1.2.4 (2023-11-02)","title":"fastMatMR 1.2.4 (2023-11-02)","text":"CRAN release: 2023-11-02 previous version.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/fastMatMR/news/index.html","id":"changes-1-2-3","dir":"Changelog","previous_headings":"","what":"Changes","title":"fastMatMR 1.2.3 (2023-11-01)","text":"Reworked getting started vignette use temporary files","code":""},{"path":[]},{"path":"https://docs.ropensci.org/fastMatMR/news/index.html","id":"changes-1-2-2","dir":"Changelog","previous_headings":"","what":"Changes","title":"fastMatMR 1.2.2 (2023-11-01)","text":"Revised package DESCRIPTION adhere CRAN guidelines. Updated examples several functions self-contained CRAN compliant. Enabled examples within documentation Added documentation releases","code":""},{"path":[]},{"path":"https://docs.ropensci.org/fastMatMR/news/index.html","id":"changes-1-2-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"fastMatMR 1.2.1 (2023-11-01)","text":"Fixed dead URLs README First CRAN compatible release attempt.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/fastMatMR/news/index.html","id":"features-1-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"fastMatMR 1.1.0 (2023-10-24)","text":"Handle paths ~ (#24) Integrated support handle integers input files. (#25) Added support handling .mtx.gz file formats. (#28) Updated fast_matrix_market 1.7.4","code":""},{"path":"https://docs.ropensci.org/fastMatMR/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"fastMatMR 1.1.0 (2023-10-24)","text":"Improved error messages distinguishing sparse non-sparse matrices. (#26) Enhanced error messages sparse_to_fmm function. (#27)","code":""},{"path":"https://docs.ropensci.org/fastMatMR/news/index.html","id":"breaking-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"fastMatMR 1.1.0 (2023-10-24)","text":"Streamlined function naming better clarity. (#29) User facing functionality affected, write_fmm still works.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/news/index.html","id":"improved-documentation-1-1-0","dir":"Changelog","previous_headings":"","what":"Improved Documentation","title":"fastMatMR 1.1.0 (2023-10-24)","text":"Streamlined vignettes readme.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/fastMatMR/news/index.html","id":"features-0-0-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"fastMatMR 0.0.1.0 (2023-09-02)","text":"Support reading R numeric vectors (.vector()) Support reading R .matrix() numerical matrices Support reading sparse matrices Matrix.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/fastMatMR/news/index.html","id":"improved-documentation-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Improved Documentation","title":"fastMatMR 0.0.0.9000 (2023-08-31)","text":"Added performance benchmark write basic introduction package.","code":""},{"path":"https://docs.ropensci.org/fastMatMR/news/index.html","id":"features-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Features","title":"fastMatMR 0.0.0.9000 (2023-08-31)","text":"full multi-OS set tests conforming CRAN submission requirements ROpenSci present. (#12) Support writing R numeric vectors (.vector()) Support writing R .matrix() numerical matrices Support writing sparse matrices Matrix.","code":""}]
